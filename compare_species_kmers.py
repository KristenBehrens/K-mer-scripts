#!/usr/bin python

import sys
import argparse
import tempfile

'''This script takes sorted files generated by Get_Sex_Spef_Kmers.sh and checks the test species file against a dictionary of the main species k-mers.
The result should be three outfiles: one containing main species only k-mers and their counts, one containing test species only k-mers and their counts,
and a file containing matches between the two species.'''

'''Due to the use of a dictionary, this script can only be run on a single thread and is not optimized for multi-threading. 
Allocate memory with this in mind, and assign to a single node (-N on slurm)''' 

# Set up the argument parser. This allows you to define file names from the command line 
parser = argparse.ArgumentParser(description='''lists of male and female specific k-mers
    -m mainspecies
    -t testspecies
    -m matchedoutput
    -u tuniqueoutput
    -q muniqueoutput''')

# Define arguments for your parser.
# Like most command line arguments, -m is the short version, --male is the long version, but either can be used.
# required=True means that you will not be able to run this script without providing the input files with the appropriate flags
parser.add_argument('-a', '--main', type=str, required=True,
                    help="Provide male-specific file of one species")
parser.add_argument('-t', '--test', type=str, required=True,
                    help="Provide a male-specific file for the other species")
parser.add_argument('-m', '--matchedoutput', action='store',
                    required=True, help="Directs the matched output to a name of your choice")
parser.add_argument('-u', '--tuniqueoutput', action='store',
                    required=True, help="Directs the unique to the test species kmer output to a name of your choice")
parser.add_argument('-q', '--muniqueoutput', action='store',
                    required=True, help="Directs the unique to the main species kmer output to a name of your choice")

args = parser.parse_args()

# Example useage:
# python compare_species_kmers.py -a main_species_male_spef -t t_species_male_spef -m sp1_sp2_matches -u t_species_unique -q m_species_unique

# Initialize dictionary
main_kmers = {} #This is a dictionary - which is more memory intensive, but has an O(n) search complexity, which saves a ton of time on compute for finding duplicate entries.

# read first (female) set of k-mers (and reverse compliments) into dictionary (like perl hash)
with open(str(args.matchedoutput), 'w') as matchedoutput_file:

    with open(str(args.tuniqueoutput), 'w') as test_uniqueoutput_file:

        with open(str(args.muniqueoutput), 'w') as main_uniqueoutput_file:
    

        #Read in the entirety of the main species male specific k-mers file, and store it in the dictionary.
            with open(str(args.main), 'r') as f_file:
                for line in f_file:
                    if not line.strip():
                        continue
                    splitline = line.rstrip('\n').rstrip('\t').split()
                    # Add Kmer to dictionary
                    main_kmers[splitline[0]] = splitline[1]
            # Read in the test species k-mers file, and check for matches in the main species file.
            # We're checking as we read the file in to conserve memory, and since dictionary finds are incredibly quick, there should be no noticable difference in performance. 
            with open(str(args.test), 'r') as g_file:
                for line in g_file:
                    if not line.strip():
                        continue
                    splitline = line.rstrip('\n').rstrip('\t').split()
                    #If k-mer has a match, write it to the matched file and then delete it from the dictionary to save memory
                    if splitline[0] in main_kmers:
                        matchedoutput_file.write(str(splitline[0]) + " " + str(splitline[1]) + "\n")
                        del main_kmers[splitline[0]]
                    # If k-mer does not have match in the main species, write the k-mer and its count to the outfile
                    # Writing to the outfile immediately instead of using a list reduces memory use
                    else:
                        test_uniqueoutput_file.write(str(splitline[0]) + " " + str(splitline[1]) + "\n")
            # write main species male specific k-mers that didn't match test species to an output file, formatted as a column with one k-mer on each line and the count in the 2nd column
            for kmer2 in main_kmers:
                main_uniqueoutput_file.write(str(kmer2 + " " + main_kmers.get(kmer2)) + "\n")
        
# close all the files you opened                
matchedoutput_file.close()
test_uniqueoutput_file.close()
main_uniqueoutput_file.close()